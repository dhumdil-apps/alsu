/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../app/alsu/code-blocks-lists/code-blocks-list/code-block/code-block.component';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from './code-block.css.shim';
import * as import9 from '../../../../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import10 from '../../../../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import11 from '../../../../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import12 from '../../../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import13 from '@angular/core/src/linker/view_container';
import * as import14 from '../../../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/forms/src/directives/default_value_accessor';
import * as import20 from '@angular/forms/src/directives/control_value_accessor';
import * as import21 from '@angular/forms/src/directives/ng_model';
import * as import22 from '@angular/forms/src/directives/ng_control';
import * as import23 from '@angular/forms/src/directives/ng_control_status';
import * as import24 from '@angular/common/src/directives/ng_if';
import * as import25 from '@angular/common/src/directives/ng_class';
export class Wrapper_CodeBlockComponent {
  /*private*/ _eventHandler:Function;
  context:import0.CodeBlockComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  constructor() {
    this._changed = false;
    this.context = new import0.CodeBlockComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_block(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.block = currValue;
      this._expr_0 = currValue;
    }
  }
  check_selectedId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.selectedId = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.remove.subscribe(_eventHandler.bind(view,'remove'))); }
  }
}
var renderType_CodeBlockComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_CodeBlockComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.CodeBlockComponent>;
  _CodeBlockComponent_0_3:Wrapper_CodeBlockComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CodeBlockComponent_Host0,renderType_CodeBlockComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'code-block',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_CodeBlockComponent0(this.viewUtils,this,0,this._el_0);
    this._CodeBlockComponent_0_3 = new Wrapper_CodeBlockComponent();
    this.compView_0.create(this._CodeBlockComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._CodeBlockComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.CodeBlockComponent) && (0 === requestNodeIndex))) { return this._CodeBlockComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._CodeBlockComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._CodeBlockComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const CodeBlockComponentNgFactory:import7.ComponentFactory<import0.CodeBlockComponent> = new import7.ComponentFactory<import0.CodeBlockComponent>('code-block',View_CodeBlockComponent_Host0,import0.CodeBlockComponent);
const styles_CodeBlockComponent:any[] = [import8.styles];
var renderType_CodeBlockComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.Emulated,styles_CodeBlockComponent,{});
export class View_CodeBlockComponent0 extends import2.AppView<import0.CodeBlockComponent> {
  _el_0:any;
  _NgClass_0_3:import9.Wrapper_NgClass;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _el_6:any;
  _DefaultValueAccessor_6_3:import10.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_6_4:any[];
  _NgModel_6_5:import11.Wrapper_NgModel;
  _NgControl_6_6:any;
  _NgControlStatus_6_7:import12.Wrapper_NgControlStatus;
  _text_7:any;
  _anchor_8:any;
  /*private*/ _vc_8:import13.ViewContainer;
  _TemplateRef_8_5:any;
  _NgIf_8_6:import14.Wrapper_NgIf;
  _text_9:any;
  _text_10:any;
  _el_11:any;
  _text_12:any;
  _text_13:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CodeBlockComponent0,renderType_CodeBlockComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._NgClass_0_3 = new import9.Wrapper_NgClass(this.parentView.injectorGet(import15.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import16.KeyValueDiffers,this.parentIndex),new import17.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'\n\n  ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'class','block-connection top'),(null as any));
    this._text_3 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'class','block'),(null as any));
    this._text_5 = this.renderer.createText(this._el_4,'\n\n    ',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,this._el_4,'input',new import3.InlineArray4(4,'class','block__data','type','text'),(null as any));
    this._DefaultValueAccessor_6_3 = new import10.Wrapper_DefaultValueAccessor(this.renderer,new import17.ElementRef(this._el_6));
    this._NG_VALUE_ACCESSOR_6_4 = [this._DefaultValueAccessor_6_3.context];
    this._NgModel_6_5 = new import11.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_6_4);
    this._NgControl_6_6 = this._NgModel_6_5.context;
    this._NgControlStatus_6_7 = new import12.Wrapper_NgControlStatus(this._NgControl_6_6);
    this._text_7 = this.renderer.createText(this._el_4,'\n\n    ',(null as any));
    this._anchor_8 = this.renderer.createTemplateAnchor(this._el_4,(null as any));
    this._vc_8 = new import13.ViewContainer(8,4,this,this._anchor_8);
    this._TemplateRef_8_5 = new import18.TemplateRef_(this,8,this._anchor_8);
    this._NgIf_8_6 = new import14.Wrapper_NgIf(this._vc_8.vcRef,this._TemplateRef_8_5);
    this._text_9 = this.renderer.createText(this._el_4,'\n\n  ',(null as any));
    this._text_10 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_11 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'class','block-connection bottom'),(null as any));
    this._text_12 = this.renderer.createText(this._el_0,'\n\n',(null as any));
    this._text_13 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_6,new import3.InlineArray8(6,'ngModelChange',(null as any),'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_6));
    this._NgModel_6_5.subscribe(this,this.eventHandler(this.handleEvent_6),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._anchor_8,
      this._text_9,
      this._text_10,
      this._el_11,
      this._text_12,
      this._text_13
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import19.DefaultValueAccessor) && (6 === requestNodeIndex))) { return this._DefaultValueAccessor_6_3.context; }
    if (((token === import20.NG_VALUE_ACCESSOR) && (6 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_6_4; }
    if (((token === import21.NgModel) && (6 === requestNodeIndex))) { return this._NgModel_6_5.context; }
    if (((token === import22.NgControl) && (6 === requestNodeIndex))) { return this._NgControl_6_6; }
    if (((token === import23.NgControlStatus) && (6 === requestNodeIndex))) { return this._NgControlStatus_6_7.context; }
    if (((token === import18.TemplateRef) && (8 === requestNodeIndex))) { return this._TemplateRef_8_5; }
    if (((token === import24.NgIf) && (8 === requestNodeIndex))) { return this._NgIf_8_6.context; }
    if (((token === import25.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 12)))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.block.type;
    this._NgClass_0_3.check_ngClass(currVal_0_0_0,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._DefaultValueAccessor_6_3.ngDoCheck(this,this._el_6,throwOnChange);
    const currVal_6_1_0:any = this.context.isDisabled();
    this._NgModel_6_5.check_isDisabled(currVal_6_1_0,throwOnChange,false);
    const currVal_6_1_1:any = this.context.block.data;
    this._NgModel_6_5.check_model(currVal_6_1_1,throwOnChange,false);
    this._NgModel_6_5.ngDoCheck(this,this._el_6,throwOnChange);
    this._NgControlStatus_6_7.ngDoCheck(this,this._el_6,throwOnChange);
    const currVal_8_0_0:any = (this.context.block.id === this.context.selectedId[1]);
    this._NgIf_8_6.check_ngIf(currVal_8_0_0,throwOnChange,false);
    this._NgIf_8_6.ngDoCheck(this,this._anchor_8,throwOnChange);
    this._vc_8.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatus_6_7.checkHost(this,this,this._el_6,throwOnChange);
  }
  destroyInternal():void {
    this._vc_8.destroyNestedViews();
    this._NgModel_6_5.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 8)) { return new View_CodeBlockComponent1(this.viewUtils,this,8,this._anchor_8,this._vc_8); }
    return (null as any);
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_6_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.block.data = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
class View_CodeBlockComponent1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _el_6:any;
  _text_7:any;
  _text_8:any;
  _el_9:any;
  _text_10:any;
  _text_11:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import13.ViewContainer) {
    super(View_CodeBlockComponent1,renderType_CodeBlockComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray2(2,'class','block__selected'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._text_2 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_0,'i',new import3.InlineArray2(2,'class','pointer material-icons'),(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'arrow_forward',(null as any));
    this._text_5 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,this._el_0,'i',new import3.InlineArray2(2,'class','clear-data material-icons'),(null as any));
    this._text_7 = this.renderer.createText(this._el_6,'close',(null as any));
    this._text_8 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_9 = import3.createRenderElement(this.renderer,this._el_0,'i',new import3.InlineArray2(2,'class','remove material-icons'),(null as any));
    this._text_10 = this.renderer.createText(this._el_9,'delete',(null as any));
    this._text_11 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_6,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_6));
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_9,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_9));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._text_8,
      this._el_9,
      this._text_10,
      this._text_11
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.parentView.context.clear()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_9(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.parentView.context.removeSelected()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}