/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var import0 = require('@angular/forms/src/directives/select_multiple_control_value_accessor');
var import1 = require('@angular/core/src/change_detection/change_detection');
var import3 = require('@angular/core/src/linker/view_utils');
var Wrapper_NgSelectMultipleOption = (function () {
    function Wrapper_NgSelectMultipleOption(p0, p1, p2) {
        this._changed = false;
        this.context = new import0.NgSelectMultipleOption(p0, p1, p2);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    Wrapper_NgSelectMultipleOption.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgSelectMultipleOption.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
    };
    Wrapper_NgSelectMultipleOption.prototype.check_ngValue = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngValue = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgSelectMultipleOption.prototype.check_value = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.value = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_NgSelectMultipleOption.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgSelectMultipleOption.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_NgSelectMultipleOption.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_NgSelectMultipleOption.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgSelectMultipleOption;
}());
exports.Wrapper_NgSelectMultipleOption = Wrapper_NgSelectMultipleOption;
var Wrapper_SelectMultipleControlValueAccessor = (function () {
    function Wrapper_SelectMultipleControlValueAccessor(p0, p1) {
        this._changed = false;
        this.context = new import0.SelectMultipleControlValueAccessor(p0, p1);
    }
    Wrapper_SelectMultipleControlValueAccessor.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_SelectMultipleControlValueAccessor.prototype.ngOnDestroy = function () {
    };
    Wrapper_SelectMultipleControlValueAccessor.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_SelectMultipleControlValueAccessor.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_SelectMultipleControlValueAccessor.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'change')) {
            var pd_sub_0 = (this.context.onChange($event.target) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'blur')) {
            var pd_sub_1 = (this.context.onTouched() !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_SelectMultipleControlValueAccessor.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_SelectMultipleControlValueAccessor;
}());
exports.Wrapper_SelectMultipleControlValueAccessor = Wrapper_SelectMultipleControlValueAccessor;
//# sourceMappingURL=select_multiple_control_value_accessor.ngfactory.js.map